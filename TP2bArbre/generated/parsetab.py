
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftADD_OPleftMUL_OPrightUMINUSADD_OP IDENTIFIER MUL_OP NUMBERprogramme : statement \';\' programmeprogramme : statementstatement : assignation\n        | expression assignation : IDENTIFIER "=" expression expression : IDENTIFIERexpression : NUMBERexpression : ADD_OP expression %prec UMINUSexpression : \'(\' expression \')\'expression : expression ADD_OP expression\n        | expression MUL_OP expression'
    
_lr_action_items = {'IDENTIFIER':([0,7,8,9,10,11,12,],[5,14,14,5,14,14,14,]),'NUMBER':([0,7,8,9,10,11,12,],[6,6,6,6,6,6,6,]),'ADD_OP':([0,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20,],[7,10,-6,-7,7,7,7,7,7,7,-8,-6,10,-10,-11,10,-9,]),'(':([0,7,8,9,10,11,12,],[8,8,8,8,8,8,8,]),'$end':([1,2,3,4,5,6,13,14,16,17,18,19,20,],[0,-2,-3,-4,-6,-7,-8,-6,-1,-10,-11,-5,-9,]),';':([2,3,4,5,6,13,14,17,18,19,20,],[9,-3,-4,-6,-7,-8,-6,-10,-11,-5,-9,]),'MUL_OP':([4,5,6,13,14,15,17,18,19,20,],[11,-6,-7,-8,-6,11,11,-11,11,-9,]),'=':([5,],[12,]),')':([6,13,14,15,17,18,20,],[-7,-8,-6,20,-10,-11,-9,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,9,],[1,16,]),'statement':([0,9,],[2,2,]),'assignation':([0,9,],[3,3,]),'expression':([0,7,8,9,10,11,12,],[4,13,15,4,17,18,19,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement ; programme','programme',3,'p_programme_expr','parser3.py',6),
  ('programme -> statement','programme',1,'p_programme_statement','parser3.py',10),
  ('statement -> assignation','statement',1,'p_statement','parser3.py',14),
  ('statement -> expression','statement',1,'p_statement','parser3.py',15),
  ('assignation -> IDENTIFIER = expression','assignation',3,'p_assign','parser3.py',19),
  ('expression -> IDENTIFIER','expression',1,'p_expression_var','parser3.py',23),
  ('expression -> NUMBER','expression',1,'p_expression','parser3.py',27),
  ('expression -> ADD_OP expression','expression',2,'p_minus','parser3.py',37),
  ('expression -> ( expression )','expression',3,'p_expression_paren','parser3.py',41),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','parser3.py',45),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','parser3.py',46),
]
